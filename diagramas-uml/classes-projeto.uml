@startuml
title Diagrama de Classes de Projeto - MesaFÃ¡cil

class Usuario {
    - id: int
    - email: string
    - login: string
    - senha: string
    - telefone: string
    + validarLogin(login: string, senha: string): boolean
    + enviarEmail(remetente: string, tituloMsg: string, corpoMsg: string): void
    + enviarSMS(remetente: string, textoMsg: string): void
}

class Cliente {
    - cpf: string
    - preferencias: string
    - nome: string
    + registrarReserva(reserva: Reserva): void
    + avaliarReserva(reserva: Reserva, nota: int, comentario: string): void
}

class Clientes {
    - ListaClientes: Cliente
    + buscaCliente(cliente_buscado: Cliente)
    + adicionarNovoCliente(cliente: Cliente)
}

class StaffRestaurante {
    - nome: string
    - perfilDeAcesso: List<string>
    + validarAcessoJornada(paginaAcessada: string): boolean
    + aprovarReserva(reserva: Reserva): void
}

class Restaurante {
    - cnpj: string
    - razaoSocial: string
    - nomeFantasia: string
    - endereco: string
    - horarioFuncionamento: string
    - tempoConfirmacao: int
    - fotosDoRestaurante: string
    - cardapio: string
    - avaliacaoMedia: float
    + disponibilizarMesas(listaSalas: List<Salao>): void
    + atualizarAvaliacaoMedia(novaAvaliacao: float): void
    + notificarCancelamento(reservaID: Reserva) : void
}

class BookingMesas {
    - lista_salao: List<Salao>
    + disponibilizarSalao(salao: Salao): void
    + listarMesasDisponiveis(dataHora: datetime): List<Mesa>
    + atualizarBooking(): boolean
}

class Salao {
    - id: int
    - nomeLocal: string
    - tipoLocal: string
    - caracteristicas: string
    + adicionarMesa(mesa: Mesa): void
    + listarMesas(): List<Mesa>
}

class Mesa {
    - id: int
    - numero: int
    - capacidade: int
    - status: string
    + reservarMesa(horaroio: datetime, duracao: float): void
    + liberarMesa(data: datetime, hora: time, mesa: Mesa): void
}

class Reserva {
    - id: int
    - dataHora: datetime
    - quantidadePessoas: int
    - status: string
    - valorPago: double
    - mesaReservada: mesa
    - donoReserva: Cliente
    + confirmarReserva(): void
    + visualizarReserva(): void
    + cancelarReserva(): void
    + atualizarStatus(novo_status: string) : boolean
    + buscarInfoReserva() : Reserva
}

class Reservas {
    - ReservasAprovadas: List <Reserva>
    + buscarReserva(reservaID: int) : Reserva
}

class Avaliacao {
    - id: int
    - nota: int
    - comentario: string
    - dataHora: datetime
    + gravarAvaliacao(): void
}

class Pagamento {
    - id: int
    - valor: double
    - status: string
    - dataHora: datetime
    + processarPagamento(): boolean
    + consultarStatus(): string
    + processarEstorno(): boolean
}

class Plano {
    - id: int
    - nome_comercial : string
    - preco : float
    - disponivel_comercializacao: float
}

class Planos {
    - ListaPlanos : List <Planos>
    + getPlanosDisponiveis() : List <Plano>
}

class Controlador {
    - usuario_logado : Usuario
    - horario : datetime
    - dispositivo_acessado: string
}

class ControladorAfiliar {
    + GetCliente(email : string, senha : string) : Cliente
    + EfetuaLogin() : boolean
}

class ControladorFazReserva {
    + ConsultarMesasDisponiveis(restaurante: Restaurante, data: datetime, horario: datetime) : List <Mesas>
    + ProcessaPagamento() : boolean
    + CriarReserva(restaurante: Restaurante, data: datetime, mesa: Mesa) : Reserva
}

class ControladorCancelarReserva {
    + buscarReserva(reservaId: int) : Reserva
    + verificarPagamento(reserva: Reserva) : boolean
}

class ControladorContratarPlanos {
    + associarPlano(plano: Plano, restaurante: Restaurante) : boolean
}

class ControladorDisponibilizarMesas {
    + criarOuAtualizarDisponibilidade(data: datetime, horario: datetime) : boolean
    + ativarSalao(salaoID: int) : Salao
}

class ControladorAprovarReserva {
    + buscar(reservaID: int) : Reserva
    + atualizarStatusRecusada() : boolean
}

class RelatorioController {
    + gerar(tipo: TipoRelatorio, periodo: datetime) : Relatorio
}

class Relatorio {
    - id: int
    - data_inicio: datetime
    - data_final: datetime
    - planos: List <Plano>
    - restaurante: Restaurante
}

' ==== Relacionamentos ====

Usuario <|-- Cliente
Clientes "1" --> "1..*" Cliente
Usuario <|-- StaffRestaurante
StaffRestaurante "1..*" --> "0..*" Reserva: aprova
Reservas "1" --> "0..*" Reserva
Reserva "1" --> "1" Mesa : reserva
Restaurante "1" --> "0..*" Reserva : gerencia
Restaurante "1" --> "1" BookingMesas : possui
Avaliacao "1" --> "1" Restaurante : avalia
BookingMesas "1" --> "1..*" Salao : disponibiliza
Salao "1" --> "1..*" Mesa : possui
Reserva "0..1" --> "1" Avaliacao : gera
Reserva "1" --> "1" Pagamento : registra
Cliente "1" --> "0..*" Reserva : realiza
Cliente "1" --> "0..*" Pagamento: paga
Planos "1" --> "1..*" Plano
Restaurante "0..*" --> "1" Plano : contrata
Restaurante "1..*" --> "1" Pagamento : paga
Plano "*" --> "1" Pagamento: cobra
Restaurante "1" --> "*" Relatorio : acessa
Plano "*" --> "1..*" Relatorio : disponibiliza

ControladorAfiliar --|> Controlador
ControladorAfiliar --> Clientes
ControladorAfiliar --> Cliente

ControladorFazReserva --|> Controlador
ControladorFazReserva --> Reserva
ControladorFazReserva --> BookingMesas

ControladorCancelarReserva --|> Controlador
ControladorCancelarReserva --> Reservas
ControladorCancelarReserva --> Reserva
ControladorCancelarReserva --> Pagamento

ControladorContratarPlanos --|> Controlador
ControladorContratarPlanos --> Planos
ControladorContratarPlanos --> Pagamento
ControladorContratarPlanos --> Restaurante

ControladorDisponibilizarMesas  --|> Controlador
ControladorDisponibilizarMesas  --> BookingMesas
ControladorDisponibilizarMesas  --> Salao

ControladorAprovarReserva --|> Controlador
ControladorAprovarReserva --> Reservas
ControladorAprovarReserva --> Reserva
ControladorAprovarReserva --> Pagamento
ControladorAprovarReserva --> Cliente

RelatorioController --|> Controlador
RelatorioController --> Relatorio

@enduml
