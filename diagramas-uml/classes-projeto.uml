@startuml
skinparam classAttributeIconSize 0

' ===== Agrupamentos por contexto =====
package "Domínio de Usuário" {
    class Usuario {
        - id: int
        - email: string
        - login: string
        - senha: string
        - telefone: string
        + validarLogin(login: string, senha: string): boolean
        + enviarEmail(m: Endereco, titulo: string, corpo: string): void
        + enviarSMS(m: Endereco, texto: string): void
    }

    class Cliente {
        - cpf: string
        - preferencias: string
        - nome: string
        - roles: string
        + registrarReserva(reserva: Reserva): void
        + avaliarReserva(reserva: Reserva, nota: int, comentario: string): void
    }

    class StaffRestaurante {
        - nome: string
        - perfilDeAcesso: List<string>
        + validarAcesso(pagina: string): boolean
        + aprovarReserva(reserva: Reserva): void
    }

    Usuario <|-- Cliente
    Usuario <|-- StaffRestaurante
}

package "Controle de Usuário" {
    class ControladorAfiliar {
        + obterCliente(email: string, senha: string): Cliente
        + efetuarLogin(): boolean
    }

    class Clientes {
        + listaClientes(): List<Cliente>
        + buscarCliente(cliente: Cliente): Cliente
        + adicionarCliente(cliente: Cliente): void
    }

    ControladorAfiliar --> Clientes
}

package "Reserva" {
    class Reserva {
        - id: int
        - dataHora: datetime
        - quantidadePessoas: int
        - status: string
        - valorPago: double
        - mesaReservada: Mesa
        - donoReserva: Cliente
        + confirmar(): void
        + cancelar(): void
        + atualizarStatus(novoStatus: string): boolean
        + buscarInformacoes(): Reserva
    }

    class Avaliacao {
        - id: int
        - nota: int
        - comentario: string
        - dataHora: datetime
        + gravar(): void
    }

    class Reservas {
        - reservasAprovadas: List<Reserva>
        + buscarReserva(id: int): Reserva
    }

    class ControladorFazReserva {
        + consultarMesas(restaurante: Restaurante, data: datetime, horario: datetime): List<Mesa>
        + processarPagamento(): boolean
        + criarReserva(restaurante: Restaurante, data: datetime, mesa: Mesa): Reserva
    }

    class ControladorCancelarReserva {
        + buscarReserva(id: int): Reserva
        + verificarPagamento(reserva: Reserva): boolean
    }

    class ControladorAprovarReserva {
        + buscar(id: int): Reserva
        + recusar(reserva: Reserva): boolean
    }

    ControladorFazReserva --> Reserva
    ControladorFazReserva --> Mesa
    ControladorCancelarReserva --> Reserva
    ControladorAprovarReserva --> Reserva
    Cliente --> Reserva
    Cliente --> Avaliacao
    Reserva --> Avaliacao
    Reservas --> Reserva
}

package "Pagamento" {
    class Pagamento {
        - id: int
        - valor: double
        - status: string
        - dataHora: datetime
        + processar(): boolean
        + consultarStatus(): string
        + estornar(): boolean
    }

    Reserva --> Pagamento : "0..1"
    Pagamento --> Reserva : "1"
}

package "Infraestrutura" {
    class Controlador {
        - usuarioLogado: Usuario
        - horario: datetime
        - dispositivo: string
    }

    class BookingMesas {
        - salas: List<Sala>
        + disponibilizarSala(sala: Sala): void
        + listarMesasDisponiveis(dataHora: datetime): List<Mesa>
        + atualizarDisponibilidade(): boolean
    }

    class Sala {
        - id: int
        - nome: string
        - tipo: string
        - caracteristicas: string
        + adicionarMesas(mesas: Mesa): void
        + listarMesas(): List<Mesa>
    }

    class Mesa {
        - id: int
        - numero: int
        - capacidade: int
        - status: string
        + reservar(data: datetime, duracao: float): void
        + liberar(data: datetime, hora: time): void
    }

    BookingMesas --> Sala
    Sala --> Mesa
    Reserva --> Mesa
    Controlador --> Reserva : gerencia
    Controlador --> Usuario : éControladoPor
}

package "Restaurante & Plano" {
    class Restaurante {
        - cnpj: string
        - razaoSocial: string
        - endereco: string
        - horarioFuncionamento: string
        - tipoCozinha: string
        - descricao: string
        - plano: Plano
        - notaMedia: float
        + disponibilizarMesas(salas: List<Sala>): void
        + avaliarAvaliacoes(notaValoracao: float): void
        + notificarCancelamento(reserva: Reserva): void
    }

    class Plano {
        - id: int
        - nome: string
        - preco: float
        - disponivel: boolean
    }

    class ControladorContratarPlanos {
        + associarPlano(plano: Plano, restaurante: Restaurante): boolean
    }

    class Planos {
        + lista(): List<Plano>
        + getDisponiveis(): List<Plano>
    }

    Restaurante --> Plano : "1..*"
    ControladorContratarPlanos --> Restaurante
    ControladorContratarPlanos --> Plano
    ControladorContratarPlanos --> Planos
}

package "Relatórios" {
    class Relatorio {
        - id: int
        - tipo: string
        - dataInicio: datetime
        - dataFim: datetime
        - restaurante: Restaurante
    }

    class RelatorioController {
        + gerar(tipo: TipoRelatorio, periodo: datetime): Relatorio
    }

    RelatorioController --> Relatorio
    Relatorio --> Restaurante
}
@enduml
