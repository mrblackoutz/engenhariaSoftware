@startuml
actor Cliente
boundary FazReservaGUI <<boundary>>
control ControladorFazReserva <<control>>
collections "BookingMesas" as bookingMesas
participant Mesa
participant Reserva
participant Pagamento

' 1) Consulta de disponibilidade
Cliente -> FazReservaGUI : SelecionarReserva()
activate FazReservaGUI
FazReservaGUI -> ControladorFazReserva : solicitarDisponibilidade(restaurante, data, horário)
activate ControladorFazReserva

ControladorFazReserva -> bookingMesas : consultarMesasDisponiveis(restaurante, data, horário)
activate bookingMesas
bookingMesas -> Mesa : listarDisponíveis(restaurante, data, horário)
activate Mesa
Mesa --> bookingMesas : mesasDisponíveis
deactivate Mesa
bookingMesas --> ControladorFazReserva : retornaDisponibilidade
deactivate bookingMesas
ControladorFazReserva --> FazReservaGUI : mostraDisponibilidade()
deactivate ControladorFazReserva
deactivate FazReservaGUI

' 2) Confirmação da reserva (com eventual pagamento)
Cliente -> FazReservaGUI : confirmarReserva(mesaEscolhida)
activate FazReservaGUI
FazReservaGUI -> ControladorFazReserva : enviarDadosReserva(restaurante, data, horário, mesa)
activate ControladorFazReserva

alt pagamento necessário
    ControladorFazReserva -> Pagamento : processarPagamento(dadosCartão)
    activate Pagamento
    Pagamento --> ControladorFazReserva : pagamentoConfirmado
    deactivate Pagamento
end

' 3) BookingMesas cria a Reserva
ControladorFazReserva -> bookingMesas : solicitarCriaçãoReserva(dadosReserva, cliente)
activate bookingMesas

bookingMesas -> Reserva : create(dadosReserva, cliente)
activate Reserva

Reserva -> Mesa : reservarMesa(mesa)
activate Mesa
Mesa --> Reserva : confirmaçãoMesa
deactivate Mesa

Reserva --> bookingMesas : retornaReserva
deactivate Reserva

bookingMesas --> ControladorFazReserva : retornaReserva
deactivate bookingMesas

' 4) Exibição de confirmação
ControladorFazReserva -> FazReservaGUI : exibirConfirmação(reserva)
deactivate ControladorFazReserva
deactivate FazReservaGUI
@enduml
