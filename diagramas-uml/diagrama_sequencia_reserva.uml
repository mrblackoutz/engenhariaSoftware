@startuml

    actor Cliente as ator_cliente
    boundary realizarReservaGUI as fronteira <<boundary>>
    control ControladorRealizarReserva as controller <<boundary>>
    collections "restaurantes : Restaurante" as list_restaurante
    participant Reserva
    participant Restaurante
    collections "BookingMesas" as book
    participant Pagamento    
    participant Mesa

    ator_cliente -> fronteira : Busca por restaurantes disponiveis
    activate fronteira
    ator_cliente -> fronteira : Informa regiÃ£o e tipo de restaurante
    
    fronteira -> controller : buscarRestaurantes(regiao: string, tipo: string)
    activate controller
    controller -> list_restaurante : filtrarRestaurantes(regiao: string, tipo: string)
    activate list_restaurante
    list_restaurante --> controller : restaurantesEntcontrados : List <Restaurate>
    deactivate list_restaurante

    alt nenhum_restaurante_encontrado
        controller --> fronteira : response "Nenhum restaurante encontrado"
        fronteira -> fronteira : exibirTelaNenhumRestauranteEncontrado()
    end

    controller --> fronteira : listaRestaurantesEncontrados : List <Restaurante>
    ator_cliente -> fronteira : Seleciona restaurante desejado
    fronteira -> controller : selecionarRestaurante(idRestaurante : int)
    controller -> list_restaurante : buscarRestaurante(idRestaurante: int)
    activate list_restaurante
    list_restaurante --> controller : restauranteSelecionado : Restaurante
    deactivate list_restaurante
    controller --> fronteira : restauranteSelecionado : Restaurante
    ator_cliente -> fronteira : seleciona data, hora e quantidade de pessoas
    fronteira -> controller : dadosReserva(data : datetime, hora : datetime, qtdPessoas : int)
    controller -> Restaurante : buscarMesasDisponiveis(data : datetime, hora : datetime, qtdPessoas : int)
    activate Restaurante
    Restaurante -> book : getMesasLivres(data: datetime, hora : datetime, qtdPessoas : int)
    activate book
    book --> Restaurante : MesasLivres : List <Mesa>
    deactivate book
    Restaurante --> controller : MesasLivres : List <Mesa>
    deactivate Restaurante
    controller --> fronteira : MesasLivres : List <Mesa>
    fronteira -> fronteira : telaSelecaoMesa(MesasLivres : List <Mesa>)
    ator_cliente -> fronteira : Seleciona mesa desejada
    ator_cliente -> fronteira : Faz login
    fronteira -> controller : reservarMesa(mesaDesejada : Mesa, cliente : Cliente)
    controller -> Reserva : reservarMesa(restaurante : Restaurante, mesa : Mesa, data : datetime, hora : datetime, cliente : Cliente)
    activate Reserva
    alt Restaurante_Exige_Taxa_De_Reserva
        Reserva -> Pagamento : criarNovoPagamento(restaurante: Restaurante, cliente: Cliente)
        activate Pagamento
        Reserva -> controller : PagamentoExigido : Pagamento
        controller -> fronteira : PagamentoExigido : Pagamento
        fronteira -> fronteira : TelaDePagamento(Pagamento)
        ator_cliente -> fronteira : Seleciona forma de pagamento
        ator_cliente -> fronteira : Realiza pagamento
        fronteira -> controller : informacoesPagamento(formaPagamento: string, pagamento : Pagamento)
        controller -> Reserva : informacoesPagamento(formaPagamento: string, pagamento : Pagamento)
        Reserva -> Pagamento : processarPagamento(formaPagamento : string)
        Pagamento --> Reserva : pagamentoConcluido : bool
        deactivate Pagamento
        alt Pagamento_Recusado
            Reserva --> controller : throw exception "Pagamento recusado"
            controller --> fronteira : response "Pagamento recusado"
            fronteira -> fronteira : TelaDeErro(msgErro : exception)
        end
        Reserva --> controller : pagamentoConcluido : bool
        controller --> fronteira : response "Pagamento aprovado" 
    end
    Reserva -> Restaurante : reservarMesa(mesa : Mesa, data : datetime, hora : datetime, cliente : Cliente)
    activate Restaurante
    Restaurante -> book : indisponibilizarMesa(mesa : Mesa, data : datetime, hora : datetime)
    activate book
    book -> Mesa : alterarHorarioDisponibilidade(data: datetime, hora : datetime)
    activate Mesa
    Mesa --> book : response "Mesa reservada"
    deactivate Mesa
    book --> Restaurante : response "Booking atualizado"
    deactivate book
    Restaurante --> Reserva : response "Sucesso ao reservar mesa"
    deactivate Restaurante
    Reserva --> controller : response "Reserva finalizada"
    deactivate Reserva
    controller --> fronteira : response "Reserva finalizada com sucesso"
    fronteira --> fronteira : TelaDeReservaConcluida()

@enduml
