@startuml
actor Restaurante
boundary AprovarReservaGUI <<boundary>>
control AprovarReservaController <<control>>
collections "reservas : Reserva" as reservas
participant Reserva
participant Cliente
participant Pagamento

== Listar Reservas Pendentes ==
Restaurante -> AprovarReservaGUI : acessarTelaReservas()
activate AprovarReservaGUI
AprovarReservaGUI -> AprovarReservaController : listarReservasPendentes()
activate AprovarReservaController
AprovarReservaController -> reservas : listarPendentes()
activate reservas
reservas --> AprovarReservaController : listaDeReservas
deactivate reservas
AprovarReservaController -> AprovarReservaGUI : exibirLista(listaDeReservas)
deactivate AprovarReservaController
deactivate AprovarReservaGUI

== Aprovar ou Recusar Reserva ==
Restaurante -> AprovarReservaGUI : selecionarReserva(idReserva, status)
activate AprovarReservaGUI
AprovarReservaGUI -> AprovarReservaController : submeterDecisao(idReserva, status)
activate AprovarReservaController

AprovarReservaController -> reservas : buscar(idReserva)
activate reservas
reservas -> Reserva : obterReserva()
activate Reserva
Reserva --> reservas : reserva
deactivate Reserva
deactivate reservas

alt status == "reservado"
    Reserva -> Reserva : aprovar()
    activate Reserva
    Reserva -> Cliente : notificarAprovacao()
    Reserva -> reservas : atualizarStatus(idReserva, "reservado")
    deactivate Reserva
else status == "recusado"
    Reserva -> Reserva : recusar()
    activate Reserva
    Reserva -> Cliente : notificarRecusa()
    alt houvePagamento
        Reserva -> Pagamento : processarEstorno()
        activate Pagamento
        Pagamento --> Reserva : estornoConfirmado
        deactivate Pagamento
    end
    Reserva -> reservas : atualizarStatus(idReserva, "recusado")
    deactivate Reserva
end

Reserva --> AprovarReservaController : resultadoDecisao(mensagem)
AprovarReservaController -> AprovarReservaGUI : mostrarResultado(mensagem)
deactivate AprovarReservaController
deactivate AprovarReservaGUI
@enduml
