@startuml
actor Restaurante
boundary PlanoUI <<boundary>>
control PlanoController <<control>>
collections "planos : Plano" as planos
participant Plano
participant Pagamento

== Seleção do Plano ==
Restaurante -> PlanoUI : selecionarPlano(planoID)
activate PlanoUI
PlanoUI -> PlanoController : solicitarDetalhesPlano(planoID)
activate PlanoController

PlanoController -> planos : obterDetalhesPlano(planoID)
activate planos
planos -> Plano : getDetalhes(planoID)
activate Plano
Plano --> planos : detalhes(preço, termos)
deactivate Plano
planos --> PlanoController : retornaDetalhes(preço, termos)
deactivate planos

PlanoController -> PlanoUI : exibirDetalhesPlano(preço, termos)
deactivate PlanoController
PlanoUI -> Restaurante : mostrarDetalhesPlano()
deactivate PlanoUI

== Confirmação e Pagamento ==
Restaurante -> PlanoUI : confirmarContratacao(dadosPagamento)
activate PlanoUI
PlanoUI -> PlanoController : processarContratacao(planoID, restauranteID, dadosPagamento)
activate PlanoController

PlanoController -> Pagamento : processarPagamento(dadosPagamento)
activate Pagamento
Pagamento --> PlanoController : resultadoPagamento(sucesso/falha)
deactivate Pagamento

alt sucesso
    ' Após pagamento, delega à coleção a solicitação de criação da assinatura
    PlanoController -> planos : solicitaCriacaoAssinatura(planoID, restauranteID)
    activate planos
    planos -> Plano : createAssinatura(planoID, restauranteID)
    activate Plano
    Plano --> planos : assinaturaCriada
    deactivate Plano
    planos --> PlanoController : confirmacaoAssinatura
    deactivate planos

    PlanoController -> PlanoUI : mostrarMensagem("Plano contratado com sucesso")
else falha
    PlanoController -> PlanoUI : mostrarMensagem("Pagamento recusado, tente novamente")
end

deactivate PlanoController
deactivate PlanoUI
@enduml
